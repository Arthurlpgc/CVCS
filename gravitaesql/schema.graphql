### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alert {
  author: User!
  message: String!
  type: AlertType!
  vid: String!
}

input AlertCreateInput {
  author: UserCreateOneWithoutAlertsInput!
  createdAt: DateTime
  message: String!
  type: AlertType!
  updatedAt: DateTime
  vid: String!
}

input AlertCreateManyWithoutAuthorInput {
  connect: [AlertWhereUniqueInput!]
  create: [AlertCreateWithoutAuthorInput!]
}

input AlertCreateWithoutAuthorInput {
  createdAt: DateTime
  message: String!
  type: AlertType!
  updatedAt: DateTime
  vid: String!
}

input AlertFilter {
  every: AlertWhereInput
  none: AlertWhereInput
  some: AlertWhereInput
}

input AlertScalarWhereInput {
  AND: [AlertScalarWhereInput!]
  authorVid: StringFilter
  createdAt: DateTimeFilter
  message: StringFilter
  NOT: [AlertScalarWhereInput!]
  OR: [AlertScalarWhereInput!]
  type: AlertType
  updatedAt: DateTimeFilter
  vid: StringFilter
}

enum AlertType {
  ERROR
  INFO
  WARN
}

input AlertUpdateInput {
  author: UserUpdateOneRequiredWithoutAlertsInput
  createdAt: DateTime
  message: String
  type: AlertType
  updatedAt: DateTime
  vid: String
}

input AlertUpdateManyDataInput {
  createdAt: DateTime
  message: String
  type: AlertType
  updatedAt: DateTime
  vid: String
}

input AlertUpdateManyWithoutAuthorInput {
  connect: [AlertWhereUniqueInput!]
  create: [AlertCreateWithoutAuthorInput!]
  delete: [AlertWhereUniqueInput!]
  deleteMany: [AlertScalarWhereInput!]
  disconnect: [AlertWhereUniqueInput!]
  set: [AlertWhereUniqueInput!]
  update: [AlertUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [AlertUpdateManyWithWhereNestedInput!]
  upsert: [AlertUpsertWithWhereUniqueWithoutAuthorInput!]
}

input AlertUpdateManyWithWhereNestedInput {
  data: AlertUpdateManyDataInput!
  where: AlertScalarWhereInput!
}

input AlertUpdateWithoutAuthorDataInput {
  createdAt: DateTime
  message: String
  type: AlertType
  updatedAt: DateTime
  vid: String
}

input AlertUpdateWithWhereUniqueWithoutAuthorInput {
  data: AlertUpdateWithoutAuthorDataInput!
  where: AlertWhereUniqueInput!
}

input AlertUpsertWithWhereUniqueWithoutAuthorInput {
  create: AlertCreateWithoutAuthorInput!
  update: AlertUpdateWithoutAuthorDataInput!
  where: AlertWhereUniqueInput!
}

input AlertWhereInput {
  AND: [AlertWhereInput!]
  author: UserWhereInput
  authorVid: StringFilter
  createdAt: DateTimeFilter
  message: StringFilter
  NOT: [AlertWhereInput!]
  OR: [AlertWhereInput!]
  type: AlertType
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input AlertWhereUniqueInput {
  vid: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type BugReport {
  author: User
  data: String
  description: String
  email: String
  title: String
  vid: String!
}

input BugReportCreateInput {
  author: UserCreateOneWithoutBugReportsInput
  createdAt: DateTime
  data: String
  description: String
  email: String
  title: String
  updatedAt: DateTime
  vid: String!
}

input BugReportCreateManyWithoutAuthorInput {
  connect: [BugReportWhereUniqueInput!]
  create: [BugReportCreateWithoutAuthorInput!]
}

input BugReportCreateWithoutAuthorInput {
  createdAt: DateTime
  data: String
  description: String
  email: String
  title: String
  updatedAt: DateTime
  vid: String!
}

input BugReportFilter {
  every: BugReportWhereInput
  none: BugReportWhereInput
  some: BugReportWhereInput
}

input BugReportScalarWhereInput {
  AND: [BugReportScalarWhereInput!]
  authorVid: NullableStringFilter
  createdAt: DateTimeFilter
  data: NullableStringFilter
  description: NullableStringFilter
  email: NullableStringFilter
  NOT: [BugReportScalarWhereInput!]
  OR: [BugReportScalarWhereInput!]
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input BugReportUpdateManyDataInput {
  createdAt: DateTime
  data: String
  description: String
  email: String
  title: String
  updatedAt: DateTime
  vid: String
}

input BugReportUpdateManyWithoutAuthorInput {
  connect: [BugReportWhereUniqueInput!]
  create: [BugReportCreateWithoutAuthorInput!]
  delete: [BugReportWhereUniqueInput!]
  deleteMany: [BugReportScalarWhereInput!]
  disconnect: [BugReportWhereUniqueInput!]
  set: [BugReportWhereUniqueInput!]
  update: [BugReportUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [BugReportUpdateManyWithWhereNestedInput!]
  upsert: [BugReportUpsertWithWhereUniqueWithoutAuthorInput!]
}

input BugReportUpdateManyWithWhereNestedInput {
  data: BugReportUpdateManyDataInput!
  where: BugReportScalarWhereInput!
}

input BugReportUpdateWithoutAuthorDataInput {
  createdAt: DateTime
  data: String
  description: String
  email: String
  title: String
  updatedAt: DateTime
  vid: String
}

input BugReportUpdateWithWhereUniqueWithoutAuthorInput {
  data: BugReportUpdateWithoutAuthorDataInput!
  where: BugReportWhereUniqueInput!
}

input BugReportUpsertWithWhereUniqueWithoutAuthorInput {
  create: BugReportCreateWithoutAuthorInput!
  update: BugReportUpdateWithoutAuthorDataInput!
  where: BugReportWhereUniqueInput!
}

input BugReportWhereInput {
  AND: [BugReportWhereInput!]
  author: UserWhereInput
  authorVid: NullableStringFilter
  createdAt: DateTimeFilter
  data: NullableStringFilter
  description: NullableStringFilter
  email: NullableStringFilter
  NOT: [BugReportWhereInput!]
  OR: [BugReportWhereInput!]
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input BugReportWhereUniqueInput {
  vid: String
}

type CV {
  owner: User!
  records(after: RecordWhereUniqueInput, before: RecordWhereUniqueInput, first: Int, last: Int): [Record!]!
  sectionOrder: String!
  title: String
  vid: String!
}

input CVCreateInput {
  createdAt: DateTime
  owner: UserCreateOneWithoutCvsInput!
  records: RecordCreateManyWithoutCvsInput
  recordsOrder: String!
  sectionOrder: String!
  title: String
  updatedAt: DateTime
  vid: String!
}

input CVCreateManyWithoutOwnerInput {
  connect: [CVWhereUniqueInput!]
  create: [CVCreateWithoutOwnerInput!]
}

input CVCreateManyWithoutRecordsInput {
  connect: [CVWhereUniqueInput!]
  create: [CVCreateWithoutRecordsInput!]
}

input CVCreateWithoutOwnerInput {
  createdAt: DateTime
  records: RecordCreateManyWithoutCvsInput
  recordsOrder: String!
  sectionOrder: String!
  title: String
  updatedAt: DateTime
  vid: String!
}

input CVCreateWithoutRecordsInput {
  createdAt: DateTime
  owner: UserCreateOneWithoutCvsInput!
  recordsOrder: String!
  sectionOrder: String!
  title: String
  updatedAt: DateTime
  vid: String!
}

input CVFilter {
  every: CVWhereInput
  none: CVWhereInput
  some: CVWhereInput
}

input CVScalarWhereInput {
  AND: [CVScalarWhereInput!]
  createdAt: DateTimeFilter
  NOT: [CVScalarWhereInput!]
  OR: [CVScalarWhereInput!]
  ownerVid: StringFilter
  records: RecordFilter
  recordsOrder: StringFilter
  sectionOrder: StringFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input CVUpdateInput {
  createdAt: DateTime
  owner: UserUpdateOneRequiredWithoutCvsInput
  records: RecordUpdateManyWithoutCvsInput
  recordsOrder: String
  sectionOrder: String
  title: String
  updatedAt: DateTime
  vid: String
}

input CVUpdateManyDataInput {
  createdAt: DateTime
  recordsOrder: String
  sectionOrder: String
  title: String
  updatedAt: DateTime
  vid: String
}

input CVUpdateManyWithoutOwnerInput {
  connect: [CVWhereUniqueInput!]
  create: [CVCreateWithoutOwnerInput!]
  delete: [CVWhereUniqueInput!]
  deleteMany: [CVScalarWhereInput!]
  disconnect: [CVWhereUniqueInput!]
  set: [CVWhereUniqueInput!]
  update: [CVUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CVUpdateManyWithWhereNestedInput!]
  upsert: [CVUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CVUpdateManyWithoutRecordsInput {
  connect: [CVWhereUniqueInput!]
  create: [CVCreateWithoutRecordsInput!]
  delete: [CVWhereUniqueInput!]
  deleteMany: [CVScalarWhereInput!]
  disconnect: [CVWhereUniqueInput!]
  set: [CVWhereUniqueInput!]
  update: [CVUpdateWithWhereUniqueWithoutRecordsInput!]
  updateMany: [CVUpdateManyWithWhereNestedInput!]
  upsert: [CVUpsertWithWhereUniqueWithoutRecordsInput!]
}

input CVUpdateManyWithWhereNestedInput {
  data: CVUpdateManyDataInput!
  where: CVScalarWhereInput!
}

input CVUpdateWithoutOwnerDataInput {
  createdAt: DateTime
  records: RecordUpdateManyWithoutCvsInput
  recordsOrder: String
  sectionOrder: String
  title: String
  updatedAt: DateTime
  vid: String
}

input CVUpdateWithoutRecordsDataInput {
  createdAt: DateTime
  owner: UserUpdateOneRequiredWithoutCvsInput
  recordsOrder: String
  sectionOrder: String
  title: String
  updatedAt: DateTime
  vid: String
}

input CVUpdateWithWhereUniqueWithoutOwnerInput {
  data: CVUpdateWithoutOwnerDataInput!
  where: CVWhereUniqueInput!
}

input CVUpdateWithWhereUniqueWithoutRecordsInput {
  data: CVUpdateWithoutRecordsDataInput!
  where: CVWhereUniqueInput!
}

input CVUpsertWithWhereUniqueWithoutOwnerInput {
  create: CVCreateWithoutOwnerInput!
  update: CVUpdateWithoutOwnerDataInput!
  where: CVWhereUniqueInput!
}

input CVUpsertWithWhereUniqueWithoutRecordsInput {
  create: CVCreateWithoutRecordsInput!
  update: CVUpdateWithoutRecordsDataInput!
  where: CVWhereUniqueInput!
}

input CVWhereInput {
  AND: [CVWhereInput!]
  createdAt: DateTimeFilter
  NOT: [CVWhereInput!]
  OR: [CVWhereInput!]
  owner: UserWhereInput
  ownerVid: StringFilter
  records: RecordFilter
  recordsOrder: StringFilter
  sectionOrder: StringFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input CVWhereUniqueInput {
  vid: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Gatekeeper {
  description: String
  name: String!
  vid: String!
}

input GatekeeperCreateInput {
  allowedUsers: UserCreateManyWithoutGatekeepersInput
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
  vid: String!
}

input GatekeeperCreateManyWithoutAllowedUsersInput {
  connect: [GatekeeperWhereUniqueInput!]
  create: [GatekeeperCreateWithoutAllowedUsersInput!]
}

input GatekeeperCreateWithoutAllowedUsersInput {
  createdAt: DateTime
  description: String
  name: String!
  updatedAt: DateTime
  vid: String!
}

input GatekeeperFilter {
  every: GatekeeperWhereInput
  none: GatekeeperWhereInput
  some: GatekeeperWhereInput
}

input GatekeeperScalarWhereInput {
  allowedUsers: UserFilter
  AND: [GatekeeperScalarWhereInput!]
  createdAt: DateTimeFilter
  description: NullableStringFilter
  name: StringFilter
  NOT: [GatekeeperScalarWhereInput!]
  OR: [GatekeeperScalarWhereInput!]
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input GatekeeperUpdateInput {
  allowedUsers: UserUpdateManyWithoutGatekeepersInput
  createdAt: DateTime
  description: String
  name: String
  updatedAt: DateTime
  vid: String
}

input GatekeeperUpdateManyDataInput {
  createdAt: DateTime
  description: String
  name: String
  updatedAt: DateTime
  vid: String
}

input GatekeeperUpdateManyWithoutAllowedUsersInput {
  connect: [GatekeeperWhereUniqueInput!]
  create: [GatekeeperCreateWithoutAllowedUsersInput!]
  delete: [GatekeeperWhereUniqueInput!]
  deleteMany: [GatekeeperScalarWhereInput!]
  disconnect: [GatekeeperWhereUniqueInput!]
  set: [GatekeeperWhereUniqueInput!]
  update: [GatekeeperUpdateWithWhereUniqueWithoutAllowedUsersInput!]
  updateMany: [GatekeeperUpdateManyWithWhereNestedInput!]
  upsert: [GatekeeperUpsertWithWhereUniqueWithoutAllowedUsersInput!]
}

input GatekeeperUpdateManyWithWhereNestedInput {
  data: GatekeeperUpdateManyDataInput!
  where: GatekeeperScalarWhereInput!
}

input GatekeeperUpdateWithoutAllowedUsersDataInput {
  createdAt: DateTime
  description: String
  name: String
  updatedAt: DateTime
  vid: String
}

input GatekeeperUpdateWithWhereUniqueWithoutAllowedUsersInput {
  data: GatekeeperUpdateWithoutAllowedUsersDataInput!
  where: GatekeeperWhereUniqueInput!
}

input GatekeeperUpsertWithWhereUniqueWithoutAllowedUsersInput {
  create: GatekeeperCreateWithoutAllowedUsersInput!
  update: GatekeeperUpdateWithoutAllowedUsersDataInput!
  where: GatekeeperWhereUniqueInput!
}

input GatekeeperWhereInput {
  allowedUsers: UserFilter
  AND: [GatekeeperWhereInput!]
  createdAt: DateTimeFilter
  description: NullableStringFilter
  name: StringFilter
  NOT: [GatekeeperWhereInput!]
  OR: [GatekeeperWhereInput!]
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input GatekeeperWhereUniqueInput {
  name: String
  vid: String
}

type Institution {
  abbreviaton: String
  name: String!
  vid: String!
}

input InstitutionCreateOneWithoutRecordAcademicInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordAcademicInput
}

input InstitutionCreateOneWithoutRecordAchievementInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordAchievementInput
}

input InstitutionCreateOneWithoutRecordEducationInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordEducationInput
}

input InstitutionCreateOneWithoutRecordWorkInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordWorkInput
}

input InstitutionCreateWithoutRecordAcademicInput {
  abbreviaton: String
  createdAt: DateTime
  name: String!
  RecordAchievement: RecordAchievementCreateManyWithoutInstitutionInput
  RecordEducation: RecordEducationCreateManyWithoutInstitutionInput
  RecordWork: RecordWorkCreateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String!
}

input InstitutionCreateWithoutRecordAchievementInput {
  abbreviaton: String
  createdAt: DateTime
  name: String!
  RecordAcademic: RecordAcademicCreateManyWithoutInstitutionInput
  RecordEducation: RecordEducationCreateManyWithoutInstitutionInput
  RecordWork: RecordWorkCreateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String!
}

input InstitutionCreateWithoutRecordEducationInput {
  abbreviaton: String
  createdAt: DateTime
  name: String!
  RecordAcademic: RecordAcademicCreateManyWithoutInstitutionInput
  RecordAchievement: RecordAchievementCreateManyWithoutInstitutionInput
  RecordWork: RecordWorkCreateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String!
}

input InstitutionCreateWithoutRecordWorkInput {
  abbreviaton: String
  createdAt: DateTime
  name: String!
  RecordAcademic: RecordAcademicCreateManyWithoutInstitutionInput
  RecordAchievement: RecordAchievementCreateManyWithoutInstitutionInput
  RecordEducation: RecordEducationCreateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String!
}

input InstitutionUpdateOneWithoutRecordAcademicInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordAcademicInput
  delete: Boolean
  disconnect: Boolean
  update: InstitutionUpdateWithoutRecordAcademicDataInput
  upsert: InstitutionUpsertWithoutRecordAcademicInput
}

input InstitutionUpdateOneWithoutRecordAchievementInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordAchievementInput
  delete: Boolean
  disconnect: Boolean
  update: InstitutionUpdateWithoutRecordAchievementDataInput
  upsert: InstitutionUpsertWithoutRecordAchievementInput
}

input InstitutionUpdateOneWithoutRecordEducationInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordEducationInput
  delete: Boolean
  disconnect: Boolean
  update: InstitutionUpdateWithoutRecordEducationDataInput
  upsert: InstitutionUpsertWithoutRecordEducationInput
}

input InstitutionUpdateOneWithoutRecordWorkInput {
  connect: InstitutionWhereUniqueInput
  create: InstitutionCreateWithoutRecordWorkInput
  delete: Boolean
  disconnect: Boolean
  update: InstitutionUpdateWithoutRecordWorkDataInput
  upsert: InstitutionUpsertWithoutRecordWorkInput
}

input InstitutionUpdateWithoutRecordAcademicDataInput {
  abbreviaton: String
  createdAt: DateTime
  name: String
  RecordAchievement: RecordAchievementUpdateManyWithoutInstitutionInput
  RecordEducation: RecordEducationUpdateManyWithoutInstitutionInput
  RecordWork: RecordWorkUpdateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String
}

input InstitutionUpdateWithoutRecordAchievementDataInput {
  abbreviaton: String
  createdAt: DateTime
  name: String
  RecordAcademic: RecordAcademicUpdateManyWithoutInstitutionInput
  RecordEducation: RecordEducationUpdateManyWithoutInstitutionInput
  RecordWork: RecordWorkUpdateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String
}

input InstitutionUpdateWithoutRecordEducationDataInput {
  abbreviaton: String
  createdAt: DateTime
  name: String
  RecordAcademic: RecordAcademicUpdateManyWithoutInstitutionInput
  RecordAchievement: RecordAchievementUpdateManyWithoutInstitutionInput
  RecordWork: RecordWorkUpdateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String
}

input InstitutionUpdateWithoutRecordWorkDataInput {
  abbreviaton: String
  createdAt: DateTime
  name: String
  RecordAcademic: RecordAcademicUpdateManyWithoutInstitutionInput
  RecordAchievement: RecordAchievementUpdateManyWithoutInstitutionInput
  RecordEducation: RecordEducationUpdateManyWithoutInstitutionInput
  updatedAt: DateTime
  vid: String
}

input InstitutionUpsertWithoutRecordAcademicInput {
  create: InstitutionCreateWithoutRecordAcademicInput!
  update: InstitutionUpdateWithoutRecordAcademicDataInput!
}

input InstitutionUpsertWithoutRecordAchievementInput {
  create: InstitutionCreateWithoutRecordAchievementInput!
  update: InstitutionUpdateWithoutRecordAchievementDataInput!
}

input InstitutionUpsertWithoutRecordEducationInput {
  create: InstitutionCreateWithoutRecordEducationInput!
  update: InstitutionUpdateWithoutRecordEducationDataInput!
}

input InstitutionUpsertWithoutRecordWorkInput {
  create: InstitutionCreateWithoutRecordWorkInput!
  update: InstitutionUpdateWithoutRecordWorkDataInput!
}

input InstitutionWhereInput {
  abbreviaton: NullableStringFilter
  AND: [InstitutionWhereInput!]
  createdAt: DateTimeFilter
  name: StringFilter
  NOT: [InstitutionWhereInput!]
  OR: [InstitutionWhereInput!]
  RecordAcademic: RecordAcademicFilter
  RecordAchievement: RecordAchievementFilter
  RecordEducation: RecordEducationFilter
  RecordWork: RecordWorkFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input InstitutionWhereUniqueInput {
  vid: String
}

type Location {
  cityTown: String
  country: String
  governingDistrict: String
  vid: String!
}

input LocationCreateOneWithoutRecordAcademicInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordAcademicInput
}

input LocationCreateOneWithoutRecordAchievementInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordAchievementInput
}

input LocationCreateOneWithoutRecordEducationInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordEducationInput
}

input LocationCreateOneWithoutRecordProjectInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordProjectInput
}

input LocationCreateOneWithoutRecordWorkInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordWorkInput
}

input LocationCreateWithoutRecordAcademicInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAchievement: RecordAchievementCreateManyWithoutLocationInput
  RecordEducation: RecordEducationCreateManyWithoutLocationInput
  RecordProject: RecordProjectCreateManyWithoutLocationInput
  RecordWork: RecordWorkCreateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String!
}

input LocationCreateWithoutRecordAchievementInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicCreateManyWithoutLocationInput
  RecordEducation: RecordEducationCreateManyWithoutLocationInput
  RecordProject: RecordProjectCreateManyWithoutLocationInput
  RecordWork: RecordWorkCreateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String!
}

input LocationCreateWithoutRecordEducationInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicCreateManyWithoutLocationInput
  RecordAchievement: RecordAchievementCreateManyWithoutLocationInput
  RecordProject: RecordProjectCreateManyWithoutLocationInput
  RecordWork: RecordWorkCreateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String!
}

input LocationCreateWithoutRecordProjectInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicCreateManyWithoutLocationInput
  RecordAchievement: RecordAchievementCreateManyWithoutLocationInput
  RecordEducation: RecordEducationCreateManyWithoutLocationInput
  RecordWork: RecordWorkCreateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String!
}

input LocationCreateWithoutRecordWorkInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicCreateManyWithoutLocationInput
  RecordAchievement: RecordAchievementCreateManyWithoutLocationInput
  RecordEducation: RecordEducationCreateManyWithoutLocationInput
  RecordProject: RecordProjectCreateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String!
}

input LocationUpdateOneWithoutRecordAcademicInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordAcademicInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutRecordAcademicDataInput
  upsert: LocationUpsertWithoutRecordAcademicInput
}

input LocationUpdateOneWithoutRecordAchievementInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordAchievementInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutRecordAchievementDataInput
  upsert: LocationUpsertWithoutRecordAchievementInput
}

input LocationUpdateOneWithoutRecordEducationInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordEducationInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutRecordEducationDataInput
  upsert: LocationUpsertWithoutRecordEducationInput
}

input LocationUpdateOneWithoutRecordProjectInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordProjectInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutRecordProjectDataInput
  upsert: LocationUpsertWithoutRecordProjectInput
}

input LocationUpdateOneWithoutRecordWorkInput {
  connect: LocationWhereUniqueInput
  create: LocationCreateWithoutRecordWorkInput
  delete: Boolean
  disconnect: Boolean
  update: LocationUpdateWithoutRecordWorkDataInput
  upsert: LocationUpsertWithoutRecordWorkInput
}

input LocationUpdateWithoutRecordAcademicDataInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAchievement: RecordAchievementUpdateManyWithoutLocationInput
  RecordEducation: RecordEducationUpdateManyWithoutLocationInput
  RecordProject: RecordProjectUpdateManyWithoutLocationInput
  RecordWork: RecordWorkUpdateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String
}

input LocationUpdateWithoutRecordAchievementDataInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicUpdateManyWithoutLocationInput
  RecordEducation: RecordEducationUpdateManyWithoutLocationInput
  RecordProject: RecordProjectUpdateManyWithoutLocationInput
  RecordWork: RecordWorkUpdateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String
}

input LocationUpdateWithoutRecordEducationDataInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicUpdateManyWithoutLocationInput
  RecordAchievement: RecordAchievementUpdateManyWithoutLocationInput
  RecordProject: RecordProjectUpdateManyWithoutLocationInput
  RecordWork: RecordWorkUpdateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String
}

input LocationUpdateWithoutRecordProjectDataInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicUpdateManyWithoutLocationInput
  RecordAchievement: RecordAchievementUpdateManyWithoutLocationInput
  RecordEducation: RecordEducationUpdateManyWithoutLocationInput
  RecordWork: RecordWorkUpdateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String
}

input LocationUpdateWithoutRecordWorkDataInput {
  cityTown: String
  country: String
  createdAt: DateTime
  governingDistrict: String
  RecordAcademic: RecordAcademicUpdateManyWithoutLocationInput
  RecordAchievement: RecordAchievementUpdateManyWithoutLocationInput
  RecordEducation: RecordEducationUpdateManyWithoutLocationInput
  RecordProject: RecordProjectUpdateManyWithoutLocationInput
  updatedAt: DateTime
  vid: String
}

input LocationUpsertWithoutRecordAcademicInput {
  create: LocationCreateWithoutRecordAcademicInput!
  update: LocationUpdateWithoutRecordAcademicDataInput!
}

input LocationUpsertWithoutRecordAchievementInput {
  create: LocationCreateWithoutRecordAchievementInput!
  update: LocationUpdateWithoutRecordAchievementDataInput!
}

input LocationUpsertWithoutRecordEducationInput {
  create: LocationCreateWithoutRecordEducationInput!
  update: LocationUpdateWithoutRecordEducationDataInput!
}

input LocationUpsertWithoutRecordProjectInput {
  create: LocationCreateWithoutRecordProjectInput!
  update: LocationUpdateWithoutRecordProjectDataInput!
}

input LocationUpsertWithoutRecordWorkInput {
  create: LocationCreateWithoutRecordWorkInput!
  update: LocationUpdateWithoutRecordWorkDataInput!
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  cityTown: NullableStringFilter
  country: NullableStringFilter
  createdAt: DateTimeFilter
  governingDistrict: NullableStringFilter
  NOT: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  RecordAcademic: RecordAcademicFilter
  RecordAchievement: RecordAchievementFilter
  RecordEducation: RecordEducationFilter
  RecordProject: RecordProjectFilter
  RecordWork: RecordWorkFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input LocationWhereUniqueInput {
  vid: String
}

type Mutation {
  createOneAlert(data: AlertCreateInput!): Alert!
  createOneBugReport(data: BugReportCreateInput!): BugReport!
  createOneCV(data: CVCreateInput!): CV!
  createOneGatekeeper(data: GatekeeperCreateInput!): Gatekeeper!
  createOneRecordAcademic(data: RecordAcademicCreateInput!): RecordAcademic!
  createOneRecordAchievement(data: RecordAchievementCreateInput!): RecordAchievement!
  createOneRecordEducation(data: RecordEducationCreateInput!): RecordEducation!
  createOneRecordLanguage(data: RecordLanguageCreateInput!): RecordLanguage!
  createOneRecordPersonal(data: RecordPersonalCreateInput!): RecordPersonal!
  createOneRecordProject(data: RecordProjectCreateInput!): RecordProject!
  createOneRecordSkill(data: RecordSkillCreateInput!): RecordSkill!
  createOneRecordWork(data: RecordWorkCreateInput!): RecordWork!
  createUser(vid: String): String!
  updateOneAlert(data: AlertUpdateInput!, where: AlertWhereUniqueInput!): Alert
  updateOneCV(data: CVUpdateInput!, where: CVWhereUniqueInput!): CV
  updateOneGatekeeper(data: GatekeeperUpdateInput!, where: GatekeeperWhereUniqueInput!): Gatekeeper
  updateOneRecordAcademic(data: RecordAcademicUpdateInput!, where: RecordAcademicWhereUniqueInput!): RecordAcademic
  updateOneRecordAchievement(data: RecordAchievementUpdateInput!, where: RecordAchievementWhereUniqueInput!): RecordAchievement
  updateOneRecordEducation(data: RecordEducationUpdateInput!, where: RecordEducationWhereUniqueInput!): RecordEducation
  updateOneRecordLanguage(data: RecordLanguageUpdateInput!, where: RecordLanguageWhereUniqueInput!): RecordLanguage
  updateOneRecordPersonal(data: RecordPersonalUpdateInput!, where: RecordPersonalWhereUniqueInput!): RecordPersonal
  updateOneRecordProject(data: RecordProjectUpdateInput!, where: RecordProjectWhereUniqueInput!): RecordProject
  updateOneRecordSkill(data: RecordSkillUpdateInput!, where: RecordSkillWhereUniqueInput!): RecordSkill
  updateOneRecordWork(data: RecordWorkUpdateInput!, where: RecordWorkWhereUniqueInput!): RecordWork
  updateUser(legacyJson: String!): Boolean!
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  currentUser: String!
  legacyJSON(userVid: String!): String!
}

type Record {
  cvs(after: CVWhereUniqueInput, before: CVWhereUniqueInput, first: Int, last: Int): [CV!]!
  hidden: Boolean!
  owner: User!
  vid: String!
}

type RecordAcademic {
  articleLink: String
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  record: Record!
  startDate: DateTime!
  title: String!
}

input RecordAcademicCreateInput {
  articleLink: String
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordAcademicInput
  location: LocationCreateOneWithoutRecordAcademicInput
  record: RecordCreateOneWithoutRecordAcademicInput!
  startDate: DateTime!
  title: String!
}

input RecordAcademicCreateManyWithoutInstitutionInput {
  connect: [RecordAcademicWhereUniqueInput!]
  create: [RecordAcademicCreateWithoutInstitutionInput!]
}

input RecordAcademicCreateManyWithoutLocationInput {
  connect: [RecordAcademicWhereUniqueInput!]
  create: [RecordAcademicCreateWithoutLocationInput!]
}

input RecordAcademicCreateManyWithoutRecordInput {
  connect: [RecordAcademicWhereUniqueInput!]
  create: [RecordAcademicCreateWithoutRecordInput!]
}

input RecordAcademicCreateWithoutInstitutionInput {
  articleLink: String
  description: String
  endDate: DateTime
  location: LocationCreateOneWithoutRecordAcademicInput
  record: RecordCreateOneWithoutRecordAcademicInput!
  startDate: DateTime!
  title: String!
}

input RecordAcademicCreateWithoutLocationInput {
  articleLink: String
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordAcademicInput
  record: RecordCreateOneWithoutRecordAcademicInput!
  startDate: DateTime!
  title: String!
}

input RecordAcademicCreateWithoutRecordInput {
  articleLink: String
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordAcademicInput
  location: LocationCreateOneWithoutRecordAcademicInput
  startDate: DateTime!
  title: String!
}

input RecordAcademicFilter {
  every: RecordAcademicWhereInput
  none: RecordAcademicWhereInput
  some: RecordAcademicWhereInput
}

input RecordAcademicScalarWhereInput {
  AND: [RecordAcademicScalarWhereInput!]
  articleLink: NullableStringFilter
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institutionVid: NullableStringFilter
  locationVid: NullableStringFilter
  NOT: [RecordAcademicScalarWhereInput!]
  OR: [RecordAcademicScalarWhereInput!]
  recordVid: StringFilter
  startDate: DateTimeFilter
  title: StringFilter
}

input RecordAcademicUpdateInput {
  articleLink: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordAcademicInput
  location: LocationUpdateOneWithoutRecordAcademicInput
  record: RecordUpdateOneRequiredWithoutRecordAcademicInput
  startDate: DateTime
  title: String
}

input RecordAcademicUpdateManyDataInput {
  articleLink: String
  description: String
  endDate: DateTime
  startDate: DateTime
  title: String
}

input RecordAcademicUpdateManyWithoutInstitutionInput {
  connect: [RecordAcademicWhereUniqueInput!]
  create: [RecordAcademicCreateWithoutInstitutionInput!]
  delete: [RecordAcademicWhereUniqueInput!]
  deleteMany: [RecordAcademicScalarWhereInput!]
  disconnect: [RecordAcademicWhereUniqueInput!]
  set: [RecordAcademicWhereUniqueInput!]
  update: [RecordAcademicUpdateWithWhereUniqueWithoutInstitutionInput!]
  updateMany: [RecordAcademicUpdateManyWithWhereNestedInput!]
  upsert: [RecordAcademicUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input RecordAcademicUpdateManyWithoutLocationInput {
  connect: [RecordAcademicWhereUniqueInput!]
  create: [RecordAcademicCreateWithoutLocationInput!]
  delete: [RecordAcademicWhereUniqueInput!]
  deleteMany: [RecordAcademicScalarWhereInput!]
  disconnect: [RecordAcademicWhereUniqueInput!]
  set: [RecordAcademicWhereUniqueInput!]
  update: [RecordAcademicUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [RecordAcademicUpdateManyWithWhereNestedInput!]
  upsert: [RecordAcademicUpsertWithWhereUniqueWithoutLocationInput!]
}

input RecordAcademicUpdateManyWithoutRecordInput {
  connect: [RecordAcademicWhereUniqueInput!]
  create: [RecordAcademicCreateWithoutRecordInput!]
  delete: [RecordAcademicWhereUniqueInput!]
  deleteMany: [RecordAcademicScalarWhereInput!]
  disconnect: [RecordAcademicWhereUniqueInput!]
  set: [RecordAcademicWhereUniqueInput!]
  update: [RecordAcademicUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordAcademicUpdateManyWithWhereNestedInput!]
  upsert: [RecordAcademicUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordAcademicUpdateManyWithWhereNestedInput {
  data: RecordAcademicUpdateManyDataInput!
  where: RecordAcademicScalarWhereInput!
}

input RecordAcademicUpdateWithoutInstitutionDataInput {
  articleLink: String
  description: String
  endDate: DateTime
  location: LocationUpdateOneWithoutRecordAcademicInput
  record: RecordUpdateOneRequiredWithoutRecordAcademicInput
  startDate: DateTime
  title: String
}

input RecordAcademicUpdateWithoutLocationDataInput {
  articleLink: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordAcademicInput
  record: RecordUpdateOneRequiredWithoutRecordAcademicInput
  startDate: DateTime
  title: String
}

input RecordAcademicUpdateWithoutRecordDataInput {
  articleLink: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordAcademicInput
  location: LocationUpdateOneWithoutRecordAcademicInput
  startDate: DateTime
  title: String
}

input RecordAcademicUpdateWithWhereUniqueWithoutInstitutionInput {
  data: RecordAcademicUpdateWithoutInstitutionDataInput!
  where: RecordAcademicWhereUniqueInput!
}

input RecordAcademicUpdateWithWhereUniqueWithoutLocationInput {
  data: RecordAcademicUpdateWithoutLocationDataInput!
  where: RecordAcademicWhereUniqueInput!
}

input RecordAcademicUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordAcademicUpdateWithoutRecordDataInput!
  where: RecordAcademicWhereUniqueInput!
}

input RecordAcademicUpsertWithWhereUniqueWithoutInstitutionInput {
  create: RecordAcademicCreateWithoutInstitutionInput!
  update: RecordAcademicUpdateWithoutInstitutionDataInput!
  where: RecordAcademicWhereUniqueInput!
}

input RecordAcademicUpsertWithWhereUniqueWithoutLocationInput {
  create: RecordAcademicCreateWithoutLocationInput!
  update: RecordAcademicUpdateWithoutLocationDataInput!
  where: RecordAcademicWhereUniqueInput!
}

input RecordAcademicUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordAcademicCreateWithoutRecordInput!
  update: RecordAcademicUpdateWithoutRecordDataInput!
  where: RecordAcademicWhereUniqueInput!
}

input RecordAcademicWhereInput {
  AND: [RecordAcademicWhereInput!]
  articleLink: NullableStringFilter
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institution: InstitutionWhereInput
  institutionVid: NullableStringFilter
  location: LocationWhereInput
  locationVid: NullableStringFilter
  NOT: [RecordAcademicWhereInput!]
  OR: [RecordAcademicWhereInput!]
  record: RecordWhereInput
  recordVid: StringFilter
  startDate: DateTimeFilter
  title: StringFilter
}

input RecordAcademicWhereUniqueInput {
  recordVid: String
}

type RecordAchievement {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  position: String
  record: Record!
  startDate: DateTime!
  title: String!
}

input RecordAchievementCreateInput {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordAchievementInput
  location: LocationCreateOneWithoutRecordAchievementInput
  position: String
  record: RecordCreateOneWithoutRecordAchievementInput!
  startDate: DateTime!
  title: String!
}

input RecordAchievementCreateManyWithoutInstitutionInput {
  connect: [RecordAchievementWhereUniqueInput!]
  create: [RecordAchievementCreateWithoutInstitutionInput!]
}

input RecordAchievementCreateManyWithoutLocationInput {
  connect: [RecordAchievementWhereUniqueInput!]
  create: [RecordAchievementCreateWithoutLocationInput!]
}

input RecordAchievementCreateManyWithoutRecordInput {
  connect: [RecordAchievementWhereUniqueInput!]
  create: [RecordAchievementCreateWithoutRecordInput!]
}

input RecordAchievementCreateWithoutInstitutionInput {
  certificateLink: String
  description: String
  endDate: DateTime
  location: LocationCreateOneWithoutRecordAchievementInput
  position: String
  record: RecordCreateOneWithoutRecordAchievementInput!
  startDate: DateTime!
  title: String!
}

input RecordAchievementCreateWithoutLocationInput {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordAchievementInput
  position: String
  record: RecordCreateOneWithoutRecordAchievementInput!
  startDate: DateTime!
  title: String!
}

input RecordAchievementCreateWithoutRecordInput {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordAchievementInput
  location: LocationCreateOneWithoutRecordAchievementInput
  position: String
  startDate: DateTime!
  title: String!
}

input RecordAchievementFilter {
  every: RecordAchievementWhereInput
  none: RecordAchievementWhereInput
  some: RecordAchievementWhereInput
}

input RecordAchievementScalarWhereInput {
  AND: [RecordAchievementScalarWhereInput!]
  certificateLink: NullableStringFilter
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institutionVid: NullableStringFilter
  locationVid: NullableStringFilter
  NOT: [RecordAchievementScalarWhereInput!]
  OR: [RecordAchievementScalarWhereInput!]
  position: NullableStringFilter
  recordVid: StringFilter
  startDate: DateTimeFilter
  title: StringFilter
}

input RecordAchievementUpdateInput {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordAchievementInput
  location: LocationUpdateOneWithoutRecordAchievementInput
  position: String
  record: RecordUpdateOneRequiredWithoutRecordAchievementInput
  startDate: DateTime
  title: String
}

input RecordAchievementUpdateManyDataInput {
  certificateLink: String
  description: String
  endDate: DateTime
  position: String
  startDate: DateTime
  title: String
}

input RecordAchievementUpdateManyWithoutInstitutionInput {
  connect: [RecordAchievementWhereUniqueInput!]
  create: [RecordAchievementCreateWithoutInstitutionInput!]
  delete: [RecordAchievementWhereUniqueInput!]
  deleteMany: [RecordAchievementScalarWhereInput!]
  disconnect: [RecordAchievementWhereUniqueInput!]
  set: [RecordAchievementWhereUniqueInput!]
  update: [RecordAchievementUpdateWithWhereUniqueWithoutInstitutionInput!]
  updateMany: [RecordAchievementUpdateManyWithWhereNestedInput!]
  upsert: [RecordAchievementUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input RecordAchievementUpdateManyWithoutLocationInput {
  connect: [RecordAchievementWhereUniqueInput!]
  create: [RecordAchievementCreateWithoutLocationInput!]
  delete: [RecordAchievementWhereUniqueInput!]
  deleteMany: [RecordAchievementScalarWhereInput!]
  disconnect: [RecordAchievementWhereUniqueInput!]
  set: [RecordAchievementWhereUniqueInput!]
  update: [RecordAchievementUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [RecordAchievementUpdateManyWithWhereNestedInput!]
  upsert: [RecordAchievementUpsertWithWhereUniqueWithoutLocationInput!]
}

input RecordAchievementUpdateManyWithoutRecordInput {
  connect: [RecordAchievementWhereUniqueInput!]
  create: [RecordAchievementCreateWithoutRecordInput!]
  delete: [RecordAchievementWhereUniqueInput!]
  deleteMany: [RecordAchievementScalarWhereInput!]
  disconnect: [RecordAchievementWhereUniqueInput!]
  set: [RecordAchievementWhereUniqueInput!]
  update: [RecordAchievementUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordAchievementUpdateManyWithWhereNestedInput!]
  upsert: [RecordAchievementUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordAchievementUpdateManyWithWhereNestedInput {
  data: RecordAchievementUpdateManyDataInput!
  where: RecordAchievementScalarWhereInput!
}

input RecordAchievementUpdateWithoutInstitutionDataInput {
  certificateLink: String
  description: String
  endDate: DateTime
  location: LocationUpdateOneWithoutRecordAchievementInput
  position: String
  record: RecordUpdateOneRequiredWithoutRecordAchievementInput
  startDate: DateTime
  title: String
}

input RecordAchievementUpdateWithoutLocationDataInput {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordAchievementInput
  position: String
  record: RecordUpdateOneRequiredWithoutRecordAchievementInput
  startDate: DateTime
  title: String
}

input RecordAchievementUpdateWithoutRecordDataInput {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordAchievementInput
  location: LocationUpdateOneWithoutRecordAchievementInput
  position: String
  startDate: DateTime
  title: String
}

input RecordAchievementUpdateWithWhereUniqueWithoutInstitutionInput {
  data: RecordAchievementUpdateWithoutInstitutionDataInput!
  where: RecordAchievementWhereUniqueInput!
}

input RecordAchievementUpdateWithWhereUniqueWithoutLocationInput {
  data: RecordAchievementUpdateWithoutLocationDataInput!
  where: RecordAchievementWhereUniqueInput!
}

input RecordAchievementUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordAchievementUpdateWithoutRecordDataInput!
  where: RecordAchievementWhereUniqueInput!
}

input RecordAchievementUpsertWithWhereUniqueWithoutInstitutionInput {
  create: RecordAchievementCreateWithoutInstitutionInput!
  update: RecordAchievementUpdateWithoutInstitutionDataInput!
  where: RecordAchievementWhereUniqueInput!
}

input RecordAchievementUpsertWithWhereUniqueWithoutLocationInput {
  create: RecordAchievementCreateWithoutLocationInput!
  update: RecordAchievementUpdateWithoutLocationDataInput!
  where: RecordAchievementWhereUniqueInput!
}

input RecordAchievementUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordAchievementCreateWithoutRecordInput!
  update: RecordAchievementUpdateWithoutRecordDataInput!
  where: RecordAchievementWhereUniqueInput!
}

input RecordAchievementWhereInput {
  AND: [RecordAchievementWhereInput!]
  certificateLink: NullableStringFilter
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institution: InstitutionWhereInput
  institutionVid: NullableStringFilter
  location: LocationWhereInput
  locationVid: NullableStringFilter
  NOT: [RecordAchievementWhereInput!]
  OR: [RecordAchievementWhereInput!]
  position: NullableStringFilter
  record: RecordWhereInput
  recordVid: StringFilter
  startDate: DateTimeFilter
  title: StringFilter
}

input RecordAchievementWhereUniqueInput {
  recordVid: String
}

input RecordCreateManyWithoutCvsInput {
  connect: [RecordWhereUniqueInput!]
  create: [RecordCreateWithoutCvsInput!]
}

input RecordCreateManyWithoutOwnerInput {
  connect: [RecordWhereUniqueInput!]
  create: [RecordCreateWithoutOwnerInput!]
}

input RecordCreateOneWithoutRecordAcademicInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordAcademicInput
}

input RecordCreateOneWithoutRecordAchievementInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordAchievementInput
}

input RecordCreateOneWithoutRecordEducationInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordEducationInput
}

input RecordCreateOneWithoutRecordLanguageInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordLanguageInput
}

input RecordCreateOneWithoutRecordPersonalInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordPersonalInput
}

input RecordCreateOneWithoutRecordProjectInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordProjectInput
}

input RecordCreateOneWithoutRecordSkillInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordSkillInput
}

input RecordCreateOneWithoutRecordWorkInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordWorkInput
}

input RecordCreateWithoutCvsInput {
  createdAt: DateTime
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutOwnerInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordAcademicInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordAchievementInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordEducationInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordLanguageInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordPersonalInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordProjectInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordSkillInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordWork: RecordWorkCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

input RecordCreateWithoutRecordWorkInput {
  createdAt: DateTime
  cvs: CVCreateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserCreateOneWithoutRecordsInput!
  RecordAcademic: RecordAcademicCreateManyWithoutRecordInput
  RecordAchievement: RecordAchievementCreateManyWithoutRecordInput
  RecordEducation: RecordEducationCreateManyWithoutRecordInput
  RecordLanguage: RecordLanguageCreateManyWithoutRecordInput
  RecordPersonal: RecordPersonalCreateManyWithoutRecordInput
  RecordProject: RecordProjectCreateManyWithoutRecordInput
  RecordSkill: RecordSkillCreateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String!
}

type RecordEducation {
  course: String!
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  record: Record!
  startDate: DateTime!
  teacher: String
}

input RecordEducationCreateInput {
  course: String!
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordEducationInput
  location: LocationCreateOneWithoutRecordEducationInput
  record: RecordCreateOneWithoutRecordEducationInput!
  startDate: DateTime!
  teacher: String
}

input RecordEducationCreateManyWithoutInstitutionInput {
  connect: [RecordEducationWhereUniqueInput!]
  create: [RecordEducationCreateWithoutInstitutionInput!]
}

input RecordEducationCreateManyWithoutLocationInput {
  connect: [RecordEducationWhereUniqueInput!]
  create: [RecordEducationCreateWithoutLocationInput!]
}

input RecordEducationCreateManyWithoutRecordInput {
  connect: [RecordEducationWhereUniqueInput!]
  create: [RecordEducationCreateWithoutRecordInput!]
}

input RecordEducationCreateWithoutInstitutionInput {
  course: String!
  description: String
  endDate: DateTime
  location: LocationCreateOneWithoutRecordEducationInput
  record: RecordCreateOneWithoutRecordEducationInput!
  startDate: DateTime!
  teacher: String
}

input RecordEducationCreateWithoutLocationInput {
  course: String!
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordEducationInput
  record: RecordCreateOneWithoutRecordEducationInput!
  startDate: DateTime!
  teacher: String
}

input RecordEducationCreateWithoutRecordInput {
  course: String!
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordEducationInput
  location: LocationCreateOneWithoutRecordEducationInput
  startDate: DateTime!
  teacher: String
}

input RecordEducationFilter {
  every: RecordEducationWhereInput
  none: RecordEducationWhereInput
  some: RecordEducationWhereInput
}

input RecordEducationScalarWhereInput {
  AND: [RecordEducationScalarWhereInput!]
  course: StringFilter
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institutionVid: NullableStringFilter
  locationVid: NullableStringFilter
  NOT: [RecordEducationScalarWhereInput!]
  OR: [RecordEducationScalarWhereInput!]
  recordVid: StringFilter
  startDate: DateTimeFilter
  teacher: NullableStringFilter
}

input RecordEducationUpdateInput {
  course: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordEducationInput
  location: LocationUpdateOneWithoutRecordEducationInput
  record: RecordUpdateOneRequiredWithoutRecordEducationInput
  startDate: DateTime
  teacher: String
}

input RecordEducationUpdateManyDataInput {
  course: String
  description: String
  endDate: DateTime
  startDate: DateTime
  teacher: String
}

input RecordEducationUpdateManyWithoutInstitutionInput {
  connect: [RecordEducationWhereUniqueInput!]
  create: [RecordEducationCreateWithoutInstitutionInput!]
  delete: [RecordEducationWhereUniqueInput!]
  deleteMany: [RecordEducationScalarWhereInput!]
  disconnect: [RecordEducationWhereUniqueInput!]
  set: [RecordEducationWhereUniqueInput!]
  update: [RecordEducationUpdateWithWhereUniqueWithoutInstitutionInput!]
  updateMany: [RecordEducationUpdateManyWithWhereNestedInput!]
  upsert: [RecordEducationUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input RecordEducationUpdateManyWithoutLocationInput {
  connect: [RecordEducationWhereUniqueInput!]
  create: [RecordEducationCreateWithoutLocationInput!]
  delete: [RecordEducationWhereUniqueInput!]
  deleteMany: [RecordEducationScalarWhereInput!]
  disconnect: [RecordEducationWhereUniqueInput!]
  set: [RecordEducationWhereUniqueInput!]
  update: [RecordEducationUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [RecordEducationUpdateManyWithWhereNestedInput!]
  upsert: [RecordEducationUpsertWithWhereUniqueWithoutLocationInput!]
}

input RecordEducationUpdateManyWithoutRecordInput {
  connect: [RecordEducationWhereUniqueInput!]
  create: [RecordEducationCreateWithoutRecordInput!]
  delete: [RecordEducationWhereUniqueInput!]
  deleteMany: [RecordEducationScalarWhereInput!]
  disconnect: [RecordEducationWhereUniqueInput!]
  set: [RecordEducationWhereUniqueInput!]
  update: [RecordEducationUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordEducationUpdateManyWithWhereNestedInput!]
  upsert: [RecordEducationUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordEducationUpdateManyWithWhereNestedInput {
  data: RecordEducationUpdateManyDataInput!
  where: RecordEducationScalarWhereInput!
}

input RecordEducationUpdateWithoutInstitutionDataInput {
  course: String
  description: String
  endDate: DateTime
  location: LocationUpdateOneWithoutRecordEducationInput
  record: RecordUpdateOneRequiredWithoutRecordEducationInput
  startDate: DateTime
  teacher: String
}

input RecordEducationUpdateWithoutLocationDataInput {
  course: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordEducationInput
  record: RecordUpdateOneRequiredWithoutRecordEducationInput
  startDate: DateTime
  teacher: String
}

input RecordEducationUpdateWithoutRecordDataInput {
  course: String
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordEducationInput
  location: LocationUpdateOneWithoutRecordEducationInput
  startDate: DateTime
  teacher: String
}

input RecordEducationUpdateWithWhereUniqueWithoutInstitutionInput {
  data: RecordEducationUpdateWithoutInstitutionDataInput!
  where: RecordEducationWhereUniqueInput!
}

input RecordEducationUpdateWithWhereUniqueWithoutLocationInput {
  data: RecordEducationUpdateWithoutLocationDataInput!
  where: RecordEducationWhereUniqueInput!
}

input RecordEducationUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordEducationUpdateWithoutRecordDataInput!
  where: RecordEducationWhereUniqueInput!
}

input RecordEducationUpsertWithWhereUniqueWithoutInstitutionInput {
  create: RecordEducationCreateWithoutInstitutionInput!
  update: RecordEducationUpdateWithoutInstitutionDataInput!
  where: RecordEducationWhereUniqueInput!
}

input RecordEducationUpsertWithWhereUniqueWithoutLocationInput {
  create: RecordEducationCreateWithoutLocationInput!
  update: RecordEducationUpdateWithoutLocationDataInput!
  where: RecordEducationWhereUniqueInput!
}

input RecordEducationUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordEducationCreateWithoutRecordInput!
  update: RecordEducationUpdateWithoutRecordDataInput!
  where: RecordEducationWhereUniqueInput!
}

input RecordEducationWhereInput {
  AND: [RecordEducationWhereInput!]
  course: StringFilter
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institution: InstitutionWhereInput
  institutionVid: NullableStringFilter
  location: LocationWhereInput
  locationVid: NullableStringFilter
  NOT: [RecordEducationWhereInput!]
  OR: [RecordEducationWhereInput!]
  record: RecordWhereInput
  recordVid: StringFilter
  startDate: DateTimeFilter
  teacher: NullableStringFilter
}

input RecordEducationWhereUniqueInput {
  recordVid: String
}

input RecordFilter {
  every: RecordWhereInput
  none: RecordWhereInput
  some: RecordWhereInput
}

type RecordLanguage {
  level: String!
  name: String!
  record: Record!
}

input RecordLanguageCreateInput {
  level: String!
  name: String!
  record: RecordCreateOneWithoutRecordLanguageInput!
}

input RecordLanguageCreateManyWithoutRecordInput {
  connect: [RecordLanguageWhereUniqueInput!]
  create: [RecordLanguageCreateWithoutRecordInput!]
}

input RecordLanguageCreateWithoutRecordInput {
  level: String!
  name: String!
}

input RecordLanguageFilter {
  every: RecordLanguageWhereInput
  none: RecordLanguageWhereInput
  some: RecordLanguageWhereInput
}

input RecordLanguageScalarWhereInput {
  AND: [RecordLanguageScalarWhereInput!]
  level: StringFilter
  name: StringFilter
  NOT: [RecordLanguageScalarWhereInput!]
  OR: [RecordLanguageScalarWhereInput!]
  recordVid: StringFilter
}

input RecordLanguageUpdateInput {
  level: String
  name: String
  record: RecordUpdateOneRequiredWithoutRecordLanguageInput
}

input RecordLanguageUpdateManyDataInput {
  level: String
  name: String
}

input RecordLanguageUpdateManyWithoutRecordInput {
  connect: [RecordLanguageWhereUniqueInput!]
  create: [RecordLanguageCreateWithoutRecordInput!]
  delete: [RecordLanguageWhereUniqueInput!]
  deleteMany: [RecordLanguageScalarWhereInput!]
  disconnect: [RecordLanguageWhereUniqueInput!]
  set: [RecordLanguageWhereUniqueInput!]
  update: [RecordLanguageUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordLanguageUpdateManyWithWhereNestedInput!]
  upsert: [RecordLanguageUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordLanguageUpdateManyWithWhereNestedInput {
  data: RecordLanguageUpdateManyDataInput!
  where: RecordLanguageScalarWhereInput!
}

input RecordLanguageUpdateWithoutRecordDataInput {
  level: String
  name: String
}

input RecordLanguageUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordLanguageUpdateWithoutRecordDataInput!
  where: RecordLanguageWhereUniqueInput!
}

input RecordLanguageUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordLanguageCreateWithoutRecordInput!
  update: RecordLanguageUpdateWithoutRecordDataInput!
  where: RecordLanguageWhereUniqueInput!
}

input RecordLanguageWhereInput {
  AND: [RecordLanguageWhereInput!]
  level: StringFilter
  name: StringFilter
  NOT: [RecordLanguageWhereInput!]
  OR: [RecordLanguageWhereInput!]
  record: RecordWhereInput
  recordVid: StringFilter
}

input RecordLanguageWhereUniqueInput {
  recordVid: String
}

type RecordPersonal {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
  record: Record!
}

input RecordPersonalCreateInput {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
  record: RecordCreateOneWithoutRecordPersonalInput!
}

input RecordPersonalCreateManyWithoutRecordInput {
  connect: [RecordPersonalWhereUniqueInput!]
  create: [RecordPersonalCreateWithoutRecordInput!]
}

input RecordPersonalCreateWithoutRecordInput {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
}

input RecordPersonalFilter {
  every: RecordPersonalWhereInput
  none: RecordPersonalWhereInput
  some: RecordPersonalWhereInput
}

input RecordPersonalScalarWhereInput {
  address: NullableStringFilter
  AND: [RecordPersonalScalarWhereInput!]
  birthday: NullableDateTimeFilter
  email: NullableStringFilter
  github: NullableStringFilter
  homepage: NullableStringFilter
  linkedin: NullableStringFilter
  name: NullableStringFilter
  NOT: [RecordPersonalScalarWhereInput!]
  OR: [RecordPersonalScalarWhereInput!]
  phone: NullableStringFilter
  recordVid: StringFilter
}

input RecordPersonalUpdateInput {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
  record: RecordUpdateOneRequiredWithoutRecordPersonalInput
}

input RecordPersonalUpdateManyDataInput {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
}

input RecordPersonalUpdateManyWithoutRecordInput {
  connect: [RecordPersonalWhereUniqueInput!]
  create: [RecordPersonalCreateWithoutRecordInput!]
  delete: [RecordPersonalWhereUniqueInput!]
  deleteMany: [RecordPersonalScalarWhereInput!]
  disconnect: [RecordPersonalWhereUniqueInput!]
  set: [RecordPersonalWhereUniqueInput!]
  update: [RecordPersonalUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordPersonalUpdateManyWithWhereNestedInput!]
  upsert: [RecordPersonalUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordPersonalUpdateManyWithWhereNestedInput {
  data: RecordPersonalUpdateManyDataInput!
  where: RecordPersonalScalarWhereInput!
}

input RecordPersonalUpdateWithoutRecordDataInput {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
}

input RecordPersonalUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordPersonalUpdateWithoutRecordDataInput!
  where: RecordPersonalWhereUniqueInput!
}

input RecordPersonalUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordPersonalCreateWithoutRecordInput!
  update: RecordPersonalUpdateWithoutRecordDataInput!
  where: RecordPersonalWhereUniqueInput!
}

input RecordPersonalWhereInput {
  address: NullableStringFilter
  AND: [RecordPersonalWhereInput!]
  birthday: NullableDateTimeFilter
  email: NullableStringFilter
  github: NullableStringFilter
  homepage: NullableStringFilter
  linkedin: NullableStringFilter
  name: NullableStringFilter
  NOT: [RecordPersonalWhereInput!]
  OR: [RecordPersonalWhereInput!]
  phone: NullableStringFilter
  record: RecordWhereInput
  recordVid: StringFilter
}

input RecordPersonalWhereUniqueInput {
  recordVid: String
}

type RecordProject {
  description: String
  endDate: DateTime
  location: Location
  programmingLanguage: String
  record: Record!
  repositoryLink: String
  startDate: DateTime!
  title: String!
}

input RecordProjectCreateInput {
  description: String
  endDate: DateTime
  location: LocationCreateOneWithoutRecordProjectInput
  programmingLanguage: String
  record: RecordCreateOneWithoutRecordProjectInput!
  repositoryLink: String
  startDate: DateTime!
  title: String!
}

input RecordProjectCreateManyWithoutLocationInput {
  connect: [RecordProjectWhereUniqueInput!]
  create: [RecordProjectCreateWithoutLocationInput!]
}

input RecordProjectCreateManyWithoutRecordInput {
  connect: [RecordProjectWhereUniqueInput!]
  create: [RecordProjectCreateWithoutRecordInput!]
}

input RecordProjectCreateWithoutLocationInput {
  description: String
  endDate: DateTime
  programmingLanguage: String
  record: RecordCreateOneWithoutRecordProjectInput!
  repositoryLink: String
  startDate: DateTime!
  title: String!
}

input RecordProjectCreateWithoutRecordInput {
  description: String
  endDate: DateTime
  location: LocationCreateOneWithoutRecordProjectInput
  programmingLanguage: String
  repositoryLink: String
  startDate: DateTime!
  title: String!
}

input RecordProjectFilter {
  every: RecordProjectWhereInput
  none: RecordProjectWhereInput
  some: RecordProjectWhereInput
}

input RecordProjectScalarWhereInput {
  AND: [RecordProjectScalarWhereInput!]
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  locationVid: NullableStringFilter
  NOT: [RecordProjectScalarWhereInput!]
  OR: [RecordProjectScalarWhereInput!]
  programmingLanguage: NullableStringFilter
  recordVid: StringFilter
  repositoryLink: NullableStringFilter
  startDate: DateTimeFilter
  title: StringFilter
}

input RecordProjectUpdateInput {
  description: String
  endDate: DateTime
  location: LocationUpdateOneWithoutRecordProjectInput
  programmingLanguage: String
  record: RecordUpdateOneRequiredWithoutRecordProjectInput
  repositoryLink: String
  startDate: DateTime
  title: String
}

input RecordProjectUpdateManyDataInput {
  description: String
  endDate: DateTime
  programmingLanguage: String
  repositoryLink: String
  startDate: DateTime
  title: String
}

input RecordProjectUpdateManyWithoutLocationInput {
  connect: [RecordProjectWhereUniqueInput!]
  create: [RecordProjectCreateWithoutLocationInput!]
  delete: [RecordProjectWhereUniqueInput!]
  deleteMany: [RecordProjectScalarWhereInput!]
  disconnect: [RecordProjectWhereUniqueInput!]
  set: [RecordProjectWhereUniqueInput!]
  update: [RecordProjectUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [RecordProjectUpdateManyWithWhereNestedInput!]
  upsert: [RecordProjectUpsertWithWhereUniqueWithoutLocationInput!]
}

input RecordProjectUpdateManyWithoutRecordInput {
  connect: [RecordProjectWhereUniqueInput!]
  create: [RecordProjectCreateWithoutRecordInput!]
  delete: [RecordProjectWhereUniqueInput!]
  deleteMany: [RecordProjectScalarWhereInput!]
  disconnect: [RecordProjectWhereUniqueInput!]
  set: [RecordProjectWhereUniqueInput!]
  update: [RecordProjectUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordProjectUpdateManyWithWhereNestedInput!]
  upsert: [RecordProjectUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordProjectUpdateManyWithWhereNestedInput {
  data: RecordProjectUpdateManyDataInput!
  where: RecordProjectScalarWhereInput!
}

input RecordProjectUpdateWithoutLocationDataInput {
  description: String
  endDate: DateTime
  programmingLanguage: String
  record: RecordUpdateOneRequiredWithoutRecordProjectInput
  repositoryLink: String
  startDate: DateTime
  title: String
}

input RecordProjectUpdateWithoutRecordDataInput {
  description: String
  endDate: DateTime
  location: LocationUpdateOneWithoutRecordProjectInput
  programmingLanguage: String
  repositoryLink: String
  startDate: DateTime
  title: String
}

input RecordProjectUpdateWithWhereUniqueWithoutLocationInput {
  data: RecordProjectUpdateWithoutLocationDataInput!
  where: RecordProjectWhereUniqueInput!
}

input RecordProjectUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordProjectUpdateWithoutRecordDataInput!
  where: RecordProjectWhereUniqueInput!
}

input RecordProjectUpsertWithWhereUniqueWithoutLocationInput {
  create: RecordProjectCreateWithoutLocationInput!
  update: RecordProjectUpdateWithoutLocationDataInput!
  where: RecordProjectWhereUniqueInput!
}

input RecordProjectUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordProjectCreateWithoutRecordInput!
  update: RecordProjectUpdateWithoutRecordDataInput!
  where: RecordProjectWhereUniqueInput!
}

input RecordProjectWhereInput {
  AND: [RecordProjectWhereInput!]
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  location: LocationWhereInput
  locationVid: NullableStringFilter
  NOT: [RecordProjectWhereInput!]
  OR: [RecordProjectWhereInput!]
  programmingLanguage: NullableStringFilter
  record: RecordWhereInput
  recordVid: StringFilter
  repositoryLink: NullableStringFilter
  startDate: DateTimeFilter
  title: StringFilter
}

input RecordProjectWhereUniqueInput {
  recordVid: String
}

input RecordScalarWhereInput {
  AND: [RecordScalarWhereInput!]
  createdAt: DateTimeFilter
  cvs: CVFilter
  hidden: BooleanFilter
  NOT: [RecordScalarWhereInput!]
  OR: [RecordScalarWhereInput!]
  ownerVid: StringFilter
  RecordAcademic: RecordAcademicFilter
  RecordAchievement: RecordAchievementFilter
  RecordEducation: RecordEducationFilter
  RecordLanguage: RecordLanguageFilter
  RecordPersonal: RecordPersonalFilter
  RecordProject: RecordProjectFilter
  RecordSkill: RecordSkillFilter
  RecordWork: RecordWorkFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

type RecordSkill {
  level: String
  name: String!
  record: Record!
  type: String!
}

input RecordSkillCreateInput {
  level: String
  name: String!
  record: RecordCreateOneWithoutRecordSkillInput!
  type: String!
}

input RecordSkillCreateManyWithoutRecordInput {
  connect: [RecordSkillWhereUniqueInput!]
  create: [RecordSkillCreateWithoutRecordInput!]
}

input RecordSkillCreateWithoutRecordInput {
  level: String
  name: String!
  type: String!
}

input RecordSkillFilter {
  every: RecordSkillWhereInput
  none: RecordSkillWhereInput
  some: RecordSkillWhereInput
}

input RecordSkillScalarWhereInput {
  AND: [RecordSkillScalarWhereInput!]
  level: NullableStringFilter
  name: StringFilter
  NOT: [RecordSkillScalarWhereInput!]
  OR: [RecordSkillScalarWhereInput!]
  recordVid: StringFilter
  type: StringFilter
}

input RecordSkillUpdateInput {
  level: String
  name: String
  record: RecordUpdateOneRequiredWithoutRecordSkillInput
  type: String
}

input RecordSkillUpdateManyDataInput {
  level: String
  name: String
  type: String
}

input RecordSkillUpdateManyWithoutRecordInput {
  connect: [RecordSkillWhereUniqueInput!]
  create: [RecordSkillCreateWithoutRecordInput!]
  delete: [RecordSkillWhereUniqueInput!]
  deleteMany: [RecordSkillScalarWhereInput!]
  disconnect: [RecordSkillWhereUniqueInput!]
  set: [RecordSkillWhereUniqueInput!]
  update: [RecordSkillUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordSkillUpdateManyWithWhereNestedInput!]
  upsert: [RecordSkillUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordSkillUpdateManyWithWhereNestedInput {
  data: RecordSkillUpdateManyDataInput!
  where: RecordSkillScalarWhereInput!
}

input RecordSkillUpdateWithoutRecordDataInput {
  level: String
  name: String
  type: String
}

input RecordSkillUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordSkillUpdateWithoutRecordDataInput!
  where: RecordSkillWhereUniqueInput!
}

input RecordSkillUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordSkillCreateWithoutRecordInput!
  update: RecordSkillUpdateWithoutRecordDataInput!
  where: RecordSkillWhereUniqueInput!
}

input RecordSkillWhereInput {
  AND: [RecordSkillWhereInput!]
  level: NullableStringFilter
  name: StringFilter
  NOT: [RecordSkillWhereInput!]
  OR: [RecordSkillWhereInput!]
  record: RecordWhereInput
  recordVid: StringFilter
  type: StringFilter
}

input RecordSkillWhereUniqueInput {
  recordVid: String
}

input RecordUpdateManyDataInput {
  createdAt: DateTime
  hidden: Boolean
  updatedAt: DateTime
  vid: String
}

input RecordUpdateManyWithoutCvsInput {
  connect: [RecordWhereUniqueInput!]
  create: [RecordCreateWithoutCvsInput!]
  delete: [RecordWhereUniqueInput!]
  deleteMany: [RecordScalarWhereInput!]
  disconnect: [RecordWhereUniqueInput!]
  set: [RecordWhereUniqueInput!]
  update: [RecordUpdateWithWhereUniqueWithoutCvsInput!]
  updateMany: [RecordUpdateManyWithWhereNestedInput!]
  upsert: [RecordUpsertWithWhereUniqueWithoutCvsInput!]
}

input RecordUpdateManyWithoutOwnerInput {
  connect: [RecordWhereUniqueInput!]
  create: [RecordCreateWithoutOwnerInput!]
  delete: [RecordWhereUniqueInput!]
  deleteMany: [RecordScalarWhereInput!]
  disconnect: [RecordWhereUniqueInput!]
  set: [RecordWhereUniqueInput!]
  update: [RecordUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [RecordUpdateManyWithWhereNestedInput!]
  upsert: [RecordUpsertWithWhereUniqueWithoutOwnerInput!]
}

input RecordUpdateManyWithWhereNestedInput {
  data: RecordUpdateManyDataInput!
  where: RecordScalarWhereInput!
}

input RecordUpdateOneRequiredWithoutRecordAcademicInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordAcademicInput
  update: RecordUpdateWithoutRecordAcademicDataInput
  upsert: RecordUpsertWithoutRecordAcademicInput
}

input RecordUpdateOneRequiredWithoutRecordAchievementInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordAchievementInput
  update: RecordUpdateWithoutRecordAchievementDataInput
  upsert: RecordUpsertWithoutRecordAchievementInput
}

input RecordUpdateOneRequiredWithoutRecordEducationInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordEducationInput
  update: RecordUpdateWithoutRecordEducationDataInput
  upsert: RecordUpsertWithoutRecordEducationInput
}

input RecordUpdateOneRequiredWithoutRecordLanguageInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordLanguageInput
  update: RecordUpdateWithoutRecordLanguageDataInput
  upsert: RecordUpsertWithoutRecordLanguageInput
}

input RecordUpdateOneRequiredWithoutRecordPersonalInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordPersonalInput
  update: RecordUpdateWithoutRecordPersonalDataInput
  upsert: RecordUpsertWithoutRecordPersonalInput
}

input RecordUpdateOneRequiredWithoutRecordProjectInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordProjectInput
  update: RecordUpdateWithoutRecordProjectDataInput
  upsert: RecordUpsertWithoutRecordProjectInput
}

input RecordUpdateOneRequiredWithoutRecordSkillInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordSkillInput
  update: RecordUpdateWithoutRecordSkillDataInput
  upsert: RecordUpsertWithoutRecordSkillInput
}

input RecordUpdateOneRequiredWithoutRecordWorkInput {
  connect: RecordWhereUniqueInput
  create: RecordCreateWithoutRecordWorkInput
  update: RecordUpdateWithoutRecordWorkDataInput
  upsert: RecordUpsertWithoutRecordWorkInput
}

input RecordUpdateWithoutCvsDataInput {
  createdAt: DateTime
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutOwnerDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordAcademicDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordAchievementDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordEducationDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordLanguageDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordPersonalDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordProjectDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordSkillDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordWork: RecordWorkUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithoutRecordWorkDataInput {
  createdAt: DateTime
  cvs: CVUpdateManyWithoutRecordsInput
  hidden: Boolean
  owner: UserUpdateOneRequiredWithoutRecordsInput
  RecordAcademic: RecordAcademicUpdateManyWithoutRecordInput
  RecordAchievement: RecordAchievementUpdateManyWithoutRecordInput
  RecordEducation: RecordEducationUpdateManyWithoutRecordInput
  RecordLanguage: RecordLanguageUpdateManyWithoutRecordInput
  RecordPersonal: RecordPersonalUpdateManyWithoutRecordInput
  RecordProject: RecordProjectUpdateManyWithoutRecordInput
  RecordSkill: RecordSkillUpdateManyWithoutRecordInput
  updatedAt: DateTime
  vid: String
}

input RecordUpdateWithWhereUniqueWithoutCvsInput {
  data: RecordUpdateWithoutCvsDataInput!
  where: RecordWhereUniqueInput!
}

input RecordUpdateWithWhereUniqueWithoutOwnerInput {
  data: RecordUpdateWithoutOwnerDataInput!
  where: RecordWhereUniqueInput!
}

input RecordUpsertWithoutRecordAcademicInput {
  create: RecordCreateWithoutRecordAcademicInput!
  update: RecordUpdateWithoutRecordAcademicDataInput!
}

input RecordUpsertWithoutRecordAchievementInput {
  create: RecordCreateWithoutRecordAchievementInput!
  update: RecordUpdateWithoutRecordAchievementDataInput!
}

input RecordUpsertWithoutRecordEducationInput {
  create: RecordCreateWithoutRecordEducationInput!
  update: RecordUpdateWithoutRecordEducationDataInput!
}

input RecordUpsertWithoutRecordLanguageInput {
  create: RecordCreateWithoutRecordLanguageInput!
  update: RecordUpdateWithoutRecordLanguageDataInput!
}

input RecordUpsertWithoutRecordPersonalInput {
  create: RecordCreateWithoutRecordPersonalInput!
  update: RecordUpdateWithoutRecordPersonalDataInput!
}

input RecordUpsertWithoutRecordProjectInput {
  create: RecordCreateWithoutRecordProjectInput!
  update: RecordUpdateWithoutRecordProjectDataInput!
}

input RecordUpsertWithoutRecordSkillInput {
  create: RecordCreateWithoutRecordSkillInput!
  update: RecordUpdateWithoutRecordSkillDataInput!
}

input RecordUpsertWithoutRecordWorkInput {
  create: RecordCreateWithoutRecordWorkInput!
  update: RecordUpdateWithoutRecordWorkDataInput!
}

input RecordUpsertWithWhereUniqueWithoutCvsInput {
  create: RecordCreateWithoutCvsInput!
  update: RecordUpdateWithoutCvsDataInput!
  where: RecordWhereUniqueInput!
}

input RecordUpsertWithWhereUniqueWithoutOwnerInput {
  create: RecordCreateWithoutOwnerInput!
  update: RecordUpdateWithoutOwnerDataInput!
  where: RecordWhereUniqueInput!
}

input RecordWhereInput {
  AND: [RecordWhereInput!]
  createdAt: DateTimeFilter
  cvs: CVFilter
  hidden: BooleanFilter
  NOT: [RecordWhereInput!]
  OR: [RecordWhereInput!]
  owner: UserWhereInput
  ownerVid: StringFilter
  RecordAcademic: RecordAcademicFilter
  RecordAchievement: RecordAchievementFilter
  RecordEducation: RecordEducationFilter
  RecordLanguage: RecordLanguageFilter
  RecordPersonal: RecordPersonalFilter
  RecordProject: RecordProjectFilter
  RecordSkill: RecordSkillFilter
  RecordWork: RecordWorkFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input RecordWhereUniqueInput {
  vid: String
}

type RecordWork {
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  record: Record!
  role: String!
  startDate: DateTime!
}

input RecordWorkCreateInput {
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordWorkInput
  location: LocationCreateOneWithoutRecordWorkInput
  record: RecordCreateOneWithoutRecordWorkInput!
  role: String!
  startDate: DateTime!
}

input RecordWorkCreateManyWithoutInstitutionInput {
  connect: [RecordWorkWhereUniqueInput!]
  create: [RecordWorkCreateWithoutInstitutionInput!]
}

input RecordWorkCreateManyWithoutLocationInput {
  connect: [RecordWorkWhereUniqueInput!]
  create: [RecordWorkCreateWithoutLocationInput!]
}

input RecordWorkCreateManyWithoutRecordInput {
  connect: [RecordWorkWhereUniqueInput!]
  create: [RecordWorkCreateWithoutRecordInput!]
}

input RecordWorkCreateWithoutInstitutionInput {
  description: String
  endDate: DateTime
  location: LocationCreateOneWithoutRecordWorkInput
  record: RecordCreateOneWithoutRecordWorkInput!
  role: String!
  startDate: DateTime!
}

input RecordWorkCreateWithoutLocationInput {
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordWorkInput
  record: RecordCreateOneWithoutRecordWorkInput!
  role: String!
  startDate: DateTime!
}

input RecordWorkCreateWithoutRecordInput {
  description: String
  endDate: DateTime
  institution: InstitutionCreateOneWithoutRecordWorkInput
  location: LocationCreateOneWithoutRecordWorkInput
  role: String!
  startDate: DateTime!
}

input RecordWorkFilter {
  every: RecordWorkWhereInput
  none: RecordWorkWhereInput
  some: RecordWorkWhereInput
}

input RecordWorkScalarWhereInput {
  AND: [RecordWorkScalarWhereInput!]
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institutionVid: NullableStringFilter
  locationVid: NullableStringFilter
  NOT: [RecordWorkScalarWhereInput!]
  OR: [RecordWorkScalarWhereInput!]
  recordVid: StringFilter
  role: StringFilter
  startDate: DateTimeFilter
}

input RecordWorkUpdateInput {
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordWorkInput
  location: LocationUpdateOneWithoutRecordWorkInput
  record: RecordUpdateOneRequiredWithoutRecordWorkInput
  role: String
  startDate: DateTime
}

input RecordWorkUpdateManyDataInput {
  description: String
  endDate: DateTime
  role: String
  startDate: DateTime
}

input RecordWorkUpdateManyWithoutInstitutionInput {
  connect: [RecordWorkWhereUniqueInput!]
  create: [RecordWorkCreateWithoutInstitutionInput!]
  delete: [RecordWorkWhereUniqueInput!]
  deleteMany: [RecordWorkScalarWhereInput!]
  disconnect: [RecordWorkWhereUniqueInput!]
  set: [RecordWorkWhereUniqueInput!]
  update: [RecordWorkUpdateWithWhereUniqueWithoutInstitutionInput!]
  updateMany: [RecordWorkUpdateManyWithWhereNestedInput!]
  upsert: [RecordWorkUpsertWithWhereUniqueWithoutInstitutionInput!]
}

input RecordWorkUpdateManyWithoutLocationInput {
  connect: [RecordWorkWhereUniqueInput!]
  create: [RecordWorkCreateWithoutLocationInput!]
  delete: [RecordWorkWhereUniqueInput!]
  deleteMany: [RecordWorkScalarWhereInput!]
  disconnect: [RecordWorkWhereUniqueInput!]
  set: [RecordWorkWhereUniqueInput!]
  update: [RecordWorkUpdateWithWhereUniqueWithoutLocationInput!]
  updateMany: [RecordWorkUpdateManyWithWhereNestedInput!]
  upsert: [RecordWorkUpsertWithWhereUniqueWithoutLocationInput!]
}

input RecordWorkUpdateManyWithoutRecordInput {
  connect: [RecordWorkWhereUniqueInput!]
  create: [RecordWorkCreateWithoutRecordInput!]
  delete: [RecordWorkWhereUniqueInput!]
  deleteMany: [RecordWorkScalarWhereInput!]
  disconnect: [RecordWorkWhereUniqueInput!]
  set: [RecordWorkWhereUniqueInput!]
  update: [RecordWorkUpdateWithWhereUniqueWithoutRecordInput!]
  updateMany: [RecordWorkUpdateManyWithWhereNestedInput!]
  upsert: [RecordWorkUpsertWithWhereUniqueWithoutRecordInput!]
}

input RecordWorkUpdateManyWithWhereNestedInput {
  data: RecordWorkUpdateManyDataInput!
  where: RecordWorkScalarWhereInput!
}

input RecordWorkUpdateWithoutInstitutionDataInput {
  description: String
  endDate: DateTime
  location: LocationUpdateOneWithoutRecordWorkInput
  record: RecordUpdateOneRequiredWithoutRecordWorkInput
  role: String
  startDate: DateTime
}

input RecordWorkUpdateWithoutLocationDataInput {
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordWorkInput
  record: RecordUpdateOneRequiredWithoutRecordWorkInput
  role: String
  startDate: DateTime
}

input RecordWorkUpdateWithoutRecordDataInput {
  description: String
  endDate: DateTime
  institution: InstitutionUpdateOneWithoutRecordWorkInput
  location: LocationUpdateOneWithoutRecordWorkInput
  role: String
  startDate: DateTime
}

input RecordWorkUpdateWithWhereUniqueWithoutInstitutionInput {
  data: RecordWorkUpdateWithoutInstitutionDataInput!
  where: RecordWorkWhereUniqueInput!
}

input RecordWorkUpdateWithWhereUniqueWithoutLocationInput {
  data: RecordWorkUpdateWithoutLocationDataInput!
  where: RecordWorkWhereUniqueInput!
}

input RecordWorkUpdateWithWhereUniqueWithoutRecordInput {
  data: RecordWorkUpdateWithoutRecordDataInput!
  where: RecordWorkWhereUniqueInput!
}

input RecordWorkUpsertWithWhereUniqueWithoutInstitutionInput {
  create: RecordWorkCreateWithoutInstitutionInput!
  update: RecordWorkUpdateWithoutInstitutionDataInput!
  where: RecordWorkWhereUniqueInput!
}

input RecordWorkUpsertWithWhereUniqueWithoutLocationInput {
  create: RecordWorkCreateWithoutLocationInput!
  update: RecordWorkUpdateWithoutLocationDataInput!
  where: RecordWorkWhereUniqueInput!
}

input RecordWorkUpsertWithWhereUniqueWithoutRecordInput {
  create: RecordWorkCreateWithoutRecordInput!
  update: RecordWorkUpdateWithoutRecordDataInput!
  where: RecordWorkWhereUniqueInput!
}

input RecordWorkWhereInput {
  AND: [RecordWorkWhereInput!]
  description: NullableStringFilter
  endDate: NullableDateTimeFilter
  institution: InstitutionWhereInput
  institutionVid: NullableStringFilter
  location: LocationWhereInput
  locationVid: NullableStringFilter
  NOT: [RecordWorkWhereInput!]
  OR: [RecordWorkWhereInput!]
  record: RecordWhereInput
  recordVid: StringFilter
  role: StringFilter
  startDate: DateTimeFilter
}

input RecordWorkWhereUniqueInput {
  recordVid: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Template {
  baseFolder: String!
  command: String!
  name: String!
  params(after: TemplateParamWhereUniqueInput, before: TemplateParamWhereUniqueInput, first: Int, last: Int): [TemplateParam!]!
  vid: String!
}

type TemplateParam {
  defaultValue: String!
  displayName: String!
  name: String!
  template: Template!
  values: String!
  vid: String!
}

input TemplateParamWhereUniqueInput {
  vid: String
}

type User {
  autosave: Boolean!
  cvs(after: CVWhereUniqueInput, before: CVWhereUniqueInput, first: Int, last: Int): [CV!]!
  firebaseId: String!
  gatekeepers(after: GatekeeperWhereUniqueInput, before: GatekeeperWhereUniqueInput, first: Int, last: Int): [Gatekeeper!]!
  records(after: RecordWhereUniqueInput, before: RecordWhereUniqueInput, first: Int, last: Int): [Record!]!
  sectionOrder: String!
  vid: String!
}

input UserCreateManyWithoutGatekeepersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGatekeepersInput!]
}

input UserCreateOneWithoutAlertsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAlertsInput
}

input UserCreateOneWithoutBugReportsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutBugReportsInput
}

input UserCreateOneWithoutCvsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCvsInput
}

input UserCreateOneWithoutRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecordsInput
}

input UserCreateWithoutAlertsInput {
  autosave: Boolean
  bugReports: BugReportCreateManyWithoutAuthorInput
  createdAt: DateTime
  cvs: CVCreateManyWithoutOwnerInput
  firebaseId: String!
  gatekeepers: GatekeeperCreateManyWithoutAllowedUsersInput
  records: RecordCreateManyWithoutOwnerInput
  recordsOrder: String!
  sectionOrder: String!
  updatedAt: DateTime
  vid: String!
}

input UserCreateWithoutBugReportsInput {
  alerts: AlertCreateManyWithoutAuthorInput
  autosave: Boolean
  createdAt: DateTime
  cvs: CVCreateManyWithoutOwnerInput
  firebaseId: String!
  gatekeepers: GatekeeperCreateManyWithoutAllowedUsersInput
  records: RecordCreateManyWithoutOwnerInput
  recordsOrder: String!
  sectionOrder: String!
  updatedAt: DateTime
  vid: String!
}

input UserCreateWithoutCvsInput {
  alerts: AlertCreateManyWithoutAuthorInput
  autosave: Boolean
  bugReports: BugReportCreateManyWithoutAuthorInput
  createdAt: DateTime
  firebaseId: String!
  gatekeepers: GatekeeperCreateManyWithoutAllowedUsersInput
  records: RecordCreateManyWithoutOwnerInput
  recordsOrder: String!
  sectionOrder: String!
  updatedAt: DateTime
  vid: String!
}

input UserCreateWithoutGatekeepersInput {
  alerts: AlertCreateManyWithoutAuthorInput
  autosave: Boolean
  bugReports: BugReportCreateManyWithoutAuthorInput
  createdAt: DateTime
  cvs: CVCreateManyWithoutOwnerInput
  firebaseId: String!
  records: RecordCreateManyWithoutOwnerInput
  recordsOrder: String!
  sectionOrder: String!
  updatedAt: DateTime
  vid: String!
}

input UserCreateWithoutRecordsInput {
  alerts: AlertCreateManyWithoutAuthorInput
  autosave: Boolean
  bugReports: BugReportCreateManyWithoutAuthorInput
  createdAt: DateTime
  cvs: CVCreateManyWithoutOwnerInput
  firebaseId: String!
  gatekeepers: GatekeeperCreateManyWithoutAllowedUsersInput
  recordsOrder: String!
  sectionOrder: String!
  updatedAt: DateTime
  vid: String!
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  alerts: AlertFilter
  AND: [UserScalarWhereInput!]
  autosave: BooleanFilter
  bugReports: BugReportFilter
  createdAt: DateTimeFilter
  cvs: CVFilter
  firebaseId: StringFilter
  gatekeepers: GatekeeperFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  records: RecordFilter
  recordsOrder: StringFilter
  sectionOrder: StringFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input UserUpdateManyDataInput {
  autosave: Boolean
  createdAt: DateTime
  firebaseId: String
  recordsOrder: String
  sectionOrder: String
  updatedAt: DateTime
  vid: String
}

input UserUpdateManyWithoutGatekeepersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGatekeepersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGatekeepersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGatekeepersInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutAlertsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAlertsInput
  update: UserUpdateWithoutAlertsDataInput
  upsert: UserUpsertWithoutAlertsInput
}

input UserUpdateOneRequiredWithoutCvsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCvsInput
  update: UserUpdateWithoutCvsDataInput
  upsert: UserUpsertWithoutCvsInput
}

input UserUpdateOneRequiredWithoutRecordsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutRecordsInput
  update: UserUpdateWithoutRecordsDataInput
  upsert: UserUpsertWithoutRecordsInput
}

input UserUpdateWithoutAlertsDataInput {
  autosave: Boolean
  bugReports: BugReportUpdateManyWithoutAuthorInput
  createdAt: DateTime
  cvs: CVUpdateManyWithoutOwnerInput
  firebaseId: String
  gatekeepers: GatekeeperUpdateManyWithoutAllowedUsersInput
  records: RecordUpdateManyWithoutOwnerInput
  recordsOrder: String
  sectionOrder: String
  updatedAt: DateTime
  vid: String
}

input UserUpdateWithoutCvsDataInput {
  alerts: AlertUpdateManyWithoutAuthorInput
  autosave: Boolean
  bugReports: BugReportUpdateManyWithoutAuthorInput
  createdAt: DateTime
  firebaseId: String
  gatekeepers: GatekeeperUpdateManyWithoutAllowedUsersInput
  records: RecordUpdateManyWithoutOwnerInput
  recordsOrder: String
  sectionOrder: String
  updatedAt: DateTime
  vid: String
}

input UserUpdateWithoutGatekeepersDataInput {
  alerts: AlertUpdateManyWithoutAuthorInput
  autosave: Boolean
  bugReports: BugReportUpdateManyWithoutAuthorInput
  createdAt: DateTime
  cvs: CVUpdateManyWithoutOwnerInput
  firebaseId: String
  records: RecordUpdateManyWithoutOwnerInput
  recordsOrder: String
  sectionOrder: String
  updatedAt: DateTime
  vid: String
}

input UserUpdateWithoutRecordsDataInput {
  alerts: AlertUpdateManyWithoutAuthorInput
  autosave: Boolean
  bugReports: BugReportUpdateManyWithoutAuthorInput
  createdAt: DateTime
  cvs: CVUpdateManyWithoutOwnerInput
  firebaseId: String
  gatekeepers: GatekeeperUpdateManyWithoutAllowedUsersInput
  recordsOrder: String
  sectionOrder: String
  updatedAt: DateTime
  vid: String
}

input UserUpdateWithWhereUniqueWithoutGatekeepersInput {
  data: UserUpdateWithoutGatekeepersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutAlertsInput {
  create: UserCreateWithoutAlertsInput!
  update: UserUpdateWithoutAlertsDataInput!
}

input UserUpsertWithoutCvsInput {
  create: UserCreateWithoutCvsInput!
  update: UserUpdateWithoutCvsDataInput!
}

input UserUpsertWithoutRecordsInput {
  create: UserCreateWithoutRecordsInput!
  update: UserUpdateWithoutRecordsDataInput!
}

input UserUpsertWithWhereUniqueWithoutGatekeepersInput {
  create: UserCreateWithoutGatekeepersInput!
  update: UserUpdateWithoutGatekeepersDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  alerts: AlertFilter
  AND: [UserWhereInput!]
  autosave: BooleanFilter
  bugReports: BugReportFilter
  createdAt: DateTimeFilter
  cvs: CVFilter
  firebaseId: StringFilter
  gatekeepers: GatekeeperFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  records: RecordFilter
  recordsOrder: StringFilter
  sectionOrder: StringFilter
  updatedAt: DateTimeFilter
  vid: StringFilter
}

input UserWhereUniqueInput {
  firebaseId: String
  vid: String
}
