datasource db {
  provider  = "mysql"
  url = "***"
}

generator prisma_client {
  provider  = "prisma-client-js"
}

model User {
  vid         String        @id
  firebaseId  String        @unique
  autosave    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  recordSets  RecordSet[]
  gatekeepers Gatekeeper[]
  alerts      Alert[]
  bugReports  BugReport[]
}

model RecordSet {
  vid                 String              @id
  mainSet             Boolean             @default(false)
  title               String?
  sectionOrder        String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  personalInfo        PersonalInfo?       @relation(fields: [personalInfoVid], references: [vid])
  personalInfoVid     String?

  academicRecords     RecordAcademic[]
  achievementRecords  RecordAchievement[]
  educationRecords    RecordEducation[]
  languageRecords     RecordLanguage[]
  projectRecords      RecordProject[]
  skillRecords        RecordSkill[]
  workRecords         RecordWork[]

  owner               User                @relation(fields: [ownerVid], references: [vid])
  ownerVid            String
}

model PersonalInfo {
  vid       String    @id
  name      String?
  email     String?
  homepage  String?
  phone     String?
  address   String?
  linkedin  String?
  github    String?
  birthday  DateTime?
}

model RecordAcademic {
  vid             String        @id
  title           String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  articleLink     String?
  hidden          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  location        Location?     @relation(fields: [locationVid], references: [vid])
  locationVid     String?
  institution     Institution?  @relation(fields: [institutionVid], references: [vid])
  institutionVid  String?

  recordSets      RecordSet[]
}

model RecordAchievement {
  vid             String        @id
  title           String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  position        String?
  certificateLink String?
  hidden          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  location        Location?     @relation(fields: [locationVid], references: [vid])
  locationVid     String?
  institution     Institution?  @relation(fields: [institutionVid], references: [vid])
  institutionVid  String?

  recordSets      RecordSet[]
}

model RecordEducation {
  vid             String        @id
  course          String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  teacher         String?
  hidden          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  location        Location?     @relation(fields: [locationVid], references: [vid])
  locationVid     String?
  institution     Institution?  @relation(fields: [institutionVid], references: [vid])
  institutionVid  String?

  recordSets      RecordSet[]
}

model RecordLanguage {
  vid         String      @id
  name        String
  level       String
  hidden      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  recordSets  RecordSet[]
}

model RecordProject {
  vid                 String      @id
  title               String
  startDate           DateTime
  endDate             DateTime?
  description         String?
  programmingLanguage String?
  repositoryLink      String?
  hidden              Boolean     @default(false)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  location            Location?   @relation(fields: [locationVid], references: [vid])
  locationVid         String?

  recordSets          RecordSet[]
}

model RecordSkill {
  vid         String      @id
  name        String
  type        String
  level       String?
  hidden      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  recordSets  RecordSet[]
}

model RecordWork {
  vid             String        @id
  role            String
  startDate       DateTime
  endDate         DateTime?
  description     String?
  hidden          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  location        Location?     @relation(fields: [locationVid], references: [vid])
  locationVid     String?
  institution     Institution?  @relation(fields: [institutionVid], references: [vid])
  institutionVid  String?

  recordSets      RecordSet[]
}

model Institution {
  vid         String    @id
  name        String
  abbreviaton String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Location {
  vid               String    @id
  country           String?
  governingDistrict String?
  cityTown          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model BugReport {
  vid         String    @id
  title       String?
  email       String?
  description String?
  data        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author      User?     @relation(fields: [authorVid], references: [vid])
  authorVid   String?
}

enum AlertType {
  INFO
  WARN
  ERROR
}

model Alert {
  vid       String    @id
  message   String
  type      AlertType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  author    User      @relation(fields: [authorVid], references: [vid])
  authorVid String
}

model Gatekeeper {
  vid           String    @id
  name          String    @unique
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  allowedUsers  User[]
}

model Template {
  vid         String          @id
  name        String          @unique
  baseFolder  String
  command     String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  params      TemplateParam[]
}

model TemplateParam {
  vid           String    @id
  name          String
  displayName   String
  defaultValue  String
  values        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  template      Template  @relation(fields: [templateVid], references: [vid])
  templateVid   String
}
